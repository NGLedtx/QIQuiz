//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "quiz")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub questions: i32,
    pub id_category: i32,
    pub id_difficulty: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::category::Entity",
        from = "Column::IdCategory",
        to = "super::category::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Category,
    #[sea_orm(
        belongs_to = "super::difficulty::Entity",
        from = "Column::IdDifficulty",
        to = "super::difficulty::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Difficulty,
    #[sea_orm(has_many = "super::question::Entity")]
    Question,
    #[sea_orm(has_many = "super::rank::Entity")]
    Rank,
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Category.def()
    }
}

impl Related<super::difficulty::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Difficulty.def()
    }
}

impl Related<super::question::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Question.def()
    }
}

impl Related<super::rank::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rank.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
